// #ifdef
#include <iostream>

class Container {
    public:
        Container();
        Container(Container& other);
        Container(Container&& other);
        Begin();
        End();
        Check_Value();
        Push();
        Pop();
        Clear();
        
        
        
};

// Каждый вид контейнеров должен предоставить пользователю следующие методы:
// -    стандартные конструкторы (конструктор по умолчанию, конструктор копирования, конструктор перемещения, 
//      конструктор со списком инициализации, см. материалы);
// -    методы доступа к элементам контейнера (например, осуществление доступа к элементу с индексом i);
// -    методы проверки наполненности контейнера (например, количество элементов в контейнере, проверка на пустоту контейнера);
// -    методы изменения контейнера (удаление и добавление новых элементов, очистка контейнера);
// -    методы для работы с итератором контейнера.

//-  Контейнеры предоставляют через методы `begin()` и `end()` итераторы, 
//   которые указывают на первый и следующий после последнего элементы контейнера соответственно.

//   Над итератором `iter` определены следующие операции:

//   - `*iter`: получение элемента, на который указывает итератор;
//   - `++iter`: перемещение итератора вперед для обращения к следующему элементу;
//   - `--iter`: перемещение итератора назад для обращения к предыдущему элементу;
//   - `iter1 == iter2`: два итератора равны, если они указывают на один и тот же элемент;
//   - `iter1 != iter2`: два итератора не равны, если они указывают на разные элементы.


// #endif